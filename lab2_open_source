question 2

students={"Alice":21,"Bob":22,"Charlie":20,"David":23,"Eve":19};
specific_student="Bob";
age_of_specific_student=students.get(specific_student);
print(f"age_specific_student:{age_of_specific_student}");
new_student="steve";
new_student_age=25;
students[new_student]=new_student_age;
print(f"{students}");

question 3

def duplicate(numbers):
    # Dictionary to store the count of each number
    count_dict = {}
    
    # Count occurrences of each number
    for number in numbers:
        if number in count_dict:
            count_dict[number] += 1
        else:
            count_dict[number] = 1
    
    # Find duplicates (numbers with a count greater than 1)
    duplicates = [number for number, count in count_dict.items() if count > 1]
    
    return duplicates

# Example usage
numbers = [1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 3]
print(f"Duplicates in the list: {duplicate(numbers)}")

question 4
def group(lst, size):
    """Splits a list into smaller lists of a given size."""
    return [lst[i:i + size] for i in range(0, len(lst), size)]

# Example usage
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(group(my_list, 3))

question 5
def lensort(strings):
    """Sorts a list of strings based on their length."""
    return sorted(strings, key=len)

# Example usage
strings = ["apple", "banana", "kiwi", "cherry"]
print(lensort(strings))

question 6
# Open a file and read its content
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)

# Read the first line
with open('example.txt', 'r') as file:
    first_line = file.readline()
    print(first_line)

# Write to a file
with open('output.txt', 'w') as file:
    file.write("Hello, World!\n")

# Append to a file
with open('output.txt', 'a') as file:
    file.write("Appending this line.\n")

question 7
def compute_file_statistics(filename):
    """Compute the number of characters, words, and lines in a file."""
    with open(filename, 'r') as file:
        text = file.read()
        num_characters = len(text)
        num_lines = text.count('\n') + 1
        num_words = len(text.split())
    return num_characters, num_words, num_lines

# Example usage
print(compute_file_statistics('example.txt'))

question 8
def reverse_file_lines(filename):
    """Prints lines of a file in reverse order."""
    with open(filename, 'r') as file:
        lines = file.readlines()
    for line in reversed(lines):
        print(line.strip())

# Example usage
reverse_file_lines('example.txt')

question 9
def reverse_each_line(filename):
    """Prints each line of a file in reverse order."""
    with open(filename, 'r') as file:
        lines = file.readlines()
    for line in lines:
        print(line.strip()[::-1])

# Example usage
reverse_each_line('example.txt')

question 10
import textwrap

def wrap_file_lines(filename, width):
    """Wraps lines longer than a given width in a file."""
    with open(filename, 'r') as file:
        lines = file.readlines()
    
    with open('wrapped_' + filename, 'w') as file:
        for line in lines:
            wrapped_lines = textwrap.wrap(line, width)
            for wrapped_line in wrapped_lines:
                file.write(wrapped_line + '\n')

# Example usage
wrap_file_lines('example.txt', 40)

question 11
def my_map(func, lst):
    """Implements map using list comprehensions."""
    return [func(x) for x in lst]

# Example usage
print(my_map(lambda x: x * 2, [1, 2, 3, 4]))

question 12
def my_filter(func, lst):
    """Implements filter using list comprehensions."""
    return [x for x in lst if func(x)]

# Example usage
print(my_filter(lambda x: x > 2, [1, 2, 3, 4]))

question 13
def triplet(n):
    """Finds all triplets (a, b, c) such that a + b = c with numbers below n."""
    triplets = set()
    for a in range(n):
        for b in range(a, n):
            c = a + b
            if c < n:
                triplets.add(tuple(sorted((a, b, c))))
    return list(triplets)

# Example usage
print(triplet(10))

question 14
import csv

def parse_csv(filename):
    """Parses a CSV file and returns its contents as a list of rows."""
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        return [row for row in reader]

# Example usage
print(parse_csv('example.csv'))

question 15
def mutate(word):
    """Computes all words generated by a single mutation."""
    mutations = set()
    alphabet = 'abcdefghijklmnopqrstuvwxyz'

    # Insertions
    for i in range(len(word) + 1):
        for letter in alphabet:
            mutations.add(word[:i] + letter + word[i:])

    # Deletions
    for i in range(len(word)):
        mutations.add(word[:i] + word[i+1:])

    # Replacements
    for i in range(len(word)):
        for letter in alphabet:
            mutations.add(word[:i] + letter + word[i+1:])

    # Swaps
    for i in range(len(word) - 1):
        mutations.add(word[:i] + word[i+1] + word[i] + word[i+2:])

    return list(mutations)

# Example usage
print(mutate("bat"))

question 16
from collections import Counter

def character_frequency(filename):
    """Counts the frequency of characters in a given file."""
    with open(filename, 'r') as file:
        text = file.read()
    frequency = Counter(text)
    return frequency

# Example usage
print(character_frequency('example.txt'))

question 17
from collections import defaultdict

def find_anagrams(words):
    """Finds and groups anagrams in a list of words."""
    anagrams = defaultdict(list)
    for word in words:
        sorted_word = ''.join(sorted(word))
        anagrams[sorted_word].append(word)
    return [group for group in anagrams.values() if len(group) > 1]

# Example usage
print(find_anagrams(['eat', 'ate', 'tea', 'tan', 'nat', 'bat']))
